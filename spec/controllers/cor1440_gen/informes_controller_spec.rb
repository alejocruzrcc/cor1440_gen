require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Cor1440Gen
  RSpec.describe InformesController, type: :controller do
    routes { Cor1440Gen::Engine.routes }
    let(:current_usuario) { build(:usuario) }
    before(:each) do
      @request.env["devise.mapping"] = Devise.mappings[:usuario]
      controller.stub(:current_usuario).and_return(current_usuario)
      current_usuario.save!
    end

    after(:each) do
      current_usuario.delete
    end


    # Atributos mínimos de valores de sesión para pasar filtros (como 
    # autenticación) definidos en CasosController.
    let(:valid_session) { 
      {"warden.user.user.key" => session["warden.user.user.key"]}
    }

    # This should return the minimal set of attributes required to create a valid
    # Informe. As you add validations to Informe, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) {
      { titulo: 't',
        filtrofechaini: '2015-07-14',
        filtrofechafin: '2015-07-14'
      }
    }

    let(:invalid_attributes) {
      { titulo: '' }
    }


    describe "GET #index" do
      it "assigns all informes as @informes" do
        informe = Informe.create! valid_attributes
        get :index, {}, valid_session
        expect(assigns(:informes)).to eq([informe])
      end
    end

    describe "GET #show" do
      it "assigns the requested informe as @informe" do
        informe = Cor1440Gen::Informe.create! valid_attributes
        get :show, {:id => informe.to_param}, valid_session
        expect(assigns(:informe)).to eq(informe)
      end
    end

    describe "GET #new" do
      it "assigns a new informe as @informe" do
        get :new, {}, valid_session
        expect(assigns(:informe)).to be_a_new(Cor1440Gen::Informe)
      end
    end

    describe "GET #edit" do
      it "assigns the requested informe as @informe" do
        informe = Informe.create! valid_attributes
        get :edit, {:id => informe.to_param}, valid_session
        expect(assigns(:informe)).to eq(informe)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Informe" do
          expect {
            post :create, {:informe => valid_attributes}, valid_session
          }.to change(Informe, :count).by(1)
        end

        it "assigns a newly created informe as @informe" do
          post :create, {:informe => valid_attributes}, valid_session
          expect(assigns(:informe)).to be_a(Informe)
          expect(assigns(:informe)).to be_persisted
        end

        it "redirects to the created informe" do
          post :create, {:informe => valid_attributes}, valid_session
          expect(response).to redirect_to(Informe.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved informe as @informe" do
          post :create, {:informe => invalid_attributes}, valid_session
          expect(assigns(:informe)).to be_a_new(Informe)
        end

        it "re-renders the 'new' template" do
          post :create, {:informe => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          {
          filtrofechaini: '2010-01-01' }
        }

        it "updates the requested informe" do
          informe = Informe.create! valid_attributes
          put :update, {:id => informe.to_param, :informe => new_attributes}, valid_session
          informe.reload
          expect(assigns(:informe)).to eq(informe)
        end

        it "assigns the requested informe as @informe" do
          informe = Informe.create! valid_attributes
          put :update, {:id => informe.to_param, :informe => valid_attributes}, valid_session
          expect(assigns(:informe)).to eq(informe)
        end

        it "redirects to the informe" do
          informe = Informe.create! valid_attributes
          put :update, {:id => informe.to_param, :informe => valid_attributes}, valid_session
          expect(response).to redirect_to(informe)
        end
      end

      context "with invalid params" do
        it "assigns the informe as @informe" do
          informe = Informe.create! valid_attributes
          put :update, {:id => informe.to_param, :informe => invalid_attributes}, valid_session
          expect(assigns(:informe)).to eq(informe)
        end

        it "re-renders the 'edit' template" do
          informe = Informe.create! valid_attributes
          put :update, {:id => informe.to_param, :informe => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested informe" do
        informe = Informe.create! valid_attributes
        expect {
          delete :destroy, {:id => informe.to_param}, valid_session
        }.to change(Informe, :count).by(-1)
      end

      it "redirects to the informes list" do
        informe = Informe.create! valid_attributes
        delete :destroy, {:id => informe.to_param}, valid_session
        expect(response).to redirect_to(informes_url)
      end
    end

  end
end
